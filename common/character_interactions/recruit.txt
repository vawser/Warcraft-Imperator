recruit = {

	on_other_nation = yes
	on_own_nation = no
	
	sound = "event:/SFX/UI/Character/Generic/sfx_ui_character_diplomacy"
	
	potential_trigger = {
		hidden:scope:target = {
			is_alive = yes
			NOT = { employer = scope:actor }
			NOT = { employer = { tag = REB } }
			NOT = { employer = { tag = BAR } }
			is_mercenary = no
		}
	}
	
	
	allowed_trigger = {
		hidden:scope:actor = { 
			can_pay_price = recruit_character
		}
		hidden:scope:target = {
			is_ruler = no
			is_primary_heir = no
			is_banished = no
			is_governor = no
			is_general = no
			is_admiral = no
			is_pregnant = no
			is_mercenary = no
			prisoner = no
			employer = { in_diplomatic_range = scope:actor }
			NOT = { loyalty > 70 }
			is_friend = scope:actor.current_ruler
			trigger_if = {
				limit = {
					OR = {
						from_ruler_family = yes
						has_any_office = yes
						is_head_of_family = yes
						is_party_leader = yes
						is_friend = employer.current_ruler
					}
				}
				NOT = { loyalty > 40 }
			}
			trigger_if = {
				limit = {
					is_married = yes
					spouse = {
						employer = scope:target.employer
						is_alive = yes
						is_ruler = yes 
					}
				}
				NOT = { is_friend = spouse }
				OR = { 
					loyalty < 20
					is_rival = spouse
				}
			}
			trigger_if = {
				limit = {
					AND = {
						is_married = yes
						spouse = {
							is_alive = yes
							employer = scope:target.employer
							OR = {
								from_ruler_family = yes
								has_any_office = yes
								is_head_of_family = yes
								is_party_leader = yes
								is_friend = employer.current_ruler
								is_general = yes
								is_admiral = yes
								is_governor = yes
								is_primary_heir = yes
							}
						}
					}
				}
				NOT = { is_friend = spouse }
				OR = { 
					loyalty < 40
					is_rival = spouse
				}
			}
		}
	}
	
	effect = {
		scope:actor = { pay_price = recruit_character }
		scope:target = {
			employer = { # employer upset
				save_scope_as = recruit_employer_scope
				add_opinion = { modifier = recruited_character target = scope:actor }
			}
			if = { # var for employer event desc
				if = {
					limit = {
						is_married = yes
						spouse = { is_ruler = yes }
					}
					set_variable = {
						name = notable_recruit
						value = 1
					}
				}
				else_if = {
					limit = { from_ruler_family = yes }
					set_variable = {
						name = notable_recruit
						value = 2
					}
				}
				else_if = {
					limit = {
						OR = {
							from_ruler_family = yes
							has_any_office = yes
							is_head_of_family = yes
							is_party_leader = yes
							is_friend = employer.current_ruler
						}
					}
					set_variable = {
						name = notable_recruit
						value = 3
					}
				}
				else_if = {
					limit = {
						is_married = yes
						spouse = {
							employer = PREV.employer
							OR = {
								will_defect_unnotable_trigger = yes
								will_defect_notable_trigger = yes
							}
						}
					}
					set_variable = {
						name = notable_recruit
						value = 4
					}
				}
				else = {
					set_variable = {
						name = notable_recruit
						value = 0
					}
				}
			}
			if = { # spouse effects, notable or unnotable
				limit = { is_married = yes }
				if = {
					limit = {
						spouse = {
							is_alive = yes
							employer = scope:recruit_employer_scope
							OR = {
								will_defect_unnotable_trigger = yes
								will_defect_notable_trigger = yes
							}
						}
					}
					move_country = scope:actor
					spouse = { defect_effect = yes }
				}
				else = { 
					divorce_character = spouse
					move_country = scope:actor
				}
			}
			else = { move_country = scope:actor } # for tooltip
			if = { # children effects, only unnotable
				limit = {
					num_of_children > 0
					any_child = {
						is_alive = yes
						is_married = no
						employer = scope:recruit_employer_scope
						will_defect_unnotable_trigger = yes
					}	
				}
				every_child = {
					limit = {
						is_alive = yes
						is_married = no
						employer = scope:recruit_employer_scope
						will_defect_unnotable_trigger = yes
					}
					defect_effect = yes
				}
			}
			hidden_effect = { # personal effects
				remove_character_modifier = foreign_citizen
				add_loyalty = granted_citizenship
				set_as_minor_character = THIS
				set_home_country = employer
				if = {
					limit = { has_variable = came_from }
					remove_variable = came_from
				}
			}
			if = { # event for old employer
				limit = {
					scope:target = { has_variable = notable_recruit }
				}
				scope:recruit_employer_scope = {
					trigger_event = { id = scheme.16 }
				}
			}
		}
	}
}	
